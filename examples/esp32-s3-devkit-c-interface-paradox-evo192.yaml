####
##
## Alarm System Interface using ESP32-S3-DevKitC-1
## Firmware configuration for ESPHome
##
## filename: esp32-s3-devkit-c-interface-paradox-evo192.yaml
## GitHub: https://github.com/konnected-io/konnected-esphome
## Buy Konnected hardware: https://konnected.io
## Help & Support: https://help@konnected.io (support is provided for verified buyers of Konnected hardware)
##
## This firmware enables an ESP32-S3-DevKitC-1 module plus two Interface Modules to mirror the state of a 
## traditional alarm system and be controllable in SmartThings.
##
## 

substitutions:
  name: konnected
  friendly_name: Alarm Panel Interface
  project_name: konnected.esp32-s3-devkit-c-interface-paradox-evo192
  project_version: 0.1.4
  sensor_debounce_time: 200ms
  warning_beep_pulse_time: 100ms
  warning_beep_pause_time: 130ms
  blink_on_state: 'true'
  zone1: GPIO4
  zone2: GPIO5
  zone3: GPIO6
  zone4: GPIO7
  zone5: GPIO15
  zone6: GPIO16
  zone7: GPIO17
  zone8: GPIO18
  zone9: GPIO8
  zone10: GPIO1
  zone11: GPIO2
  zone12: GPIO21
  alarm1: GPIO13
  alarm2: GPIO14
  out1: GPIO48
  status_led: GPIO44
  keyswitch_momentary_time: 5s
  status_led_inverted: "true"
  
  # To connect to AWS IoT specifiy connection parameters and credentials specific
  # to each device. Create a Thing and Certificate in AWS IoT Core for each device and
  # include it in a secrets.yaml file or embed directly.

  # mqtt_addr: a35zoibvcdzyfb-ats.iot.us-east-1.amazonaws.com
  # certificate_authority: !secret ca_cert          # ATS Root CA 1: https://www.amazontrust.com/repository/
  # client_certificate: !secret certificate
  # client_certificate_key: !secret private_key

esphome:
  name_add_mac_suffix: true
packages:
  remote_package:
    url: https://github.com/konnected-io/konnected-esphome
    ref: master
    refresh: 5min
    files:
    - packages/core-esp32-s3.yaml
    - packages/status-led.yaml
    - packages/wifi-esp32.yaml
    - packages/mdns.yaml
    - packages/alarm-panel/zone1.yaml
    - packages/alarm-panel/zone2.yaml
    - packages/alarm-panel/zone3.yaml
    - packages/alarm-panel/zone4.yaml
    - packages/alarm-panel/zone5.yaml
    - packages/alarm-panel/zone6.yaml
    - packages/alarm-panel/zone7.yaml
    - packages/alarm-panel/zone8.yaml
    - packages/alarm-panel/zone9.yaml
    - packages/alarm-panel/zone10.yaml
    - packages/alarm-panel/zone11.yaml
    - packages/alarm-panel/zone12.yaml
    # - packages/alarm-panel/alarm1.yaml
    # - packages/alarm-panel/alarm2.yaml

alarm_control_panel:
  platform: template
  name: Alarm System
  restore_mode: RESTORE_DEFAULT_DISARMED
  id: acp1
  
  # Trigger the physical alarm panel to toggle armed/disarmed by pressing the keyswitch
  # whenever the virtual alarm panel changes to armed or disarmed state, and the traditional
  # panel state does not match
  on_state:
    then:
      - if:
          condition:
            or:
              - and:
                - lambda: 'return id(acp1)->get_state() == ACP_STATE_DISARMED;'
                - binary_sensor.is_off: zone12
              - and:
                - lambda: 'return id(acp1)->get_state() == ACP_STATE_ARMED_AWAY;'
                - binary_sensor.is_on: zone12
          then:
            - button.press:
                id: alarm_keyswitch
  on_armed_away:
    then:
      - light.turn_on:
          id: esp32s3_rgb_led
          red: 60%
          blue: 0%
          green: 0%
          brightness: 50%
          effect: pulse
  on_disarmed:
    then:
      - light.turn_on:
          id: esp32s3_rgb_led
          red: 0%
          blue: 0%
          green: 60%
          brightness: 50%
          effect: pulse

binary_sensor:
  - id: !extend zone9
    pin:
      number: $zone9
      mode: INPUT_PULLUP

  - id: !extend zone10
    pin:
      number: $zone10
      mode: INPUT_PULLUP

  # Monitor the alarm triggered/cleared state of the physical panel
  # and update the virtual alarm panel accordingly
  - id: !extend zone11
    internal: true
    pin:
      number: $zone11
      mode: INPUT_PULLUP

    on_state:
      - if:
          condition:
            binary_sensor.is_on: zone11
          then:
            lambda: 'id(acp1).publish_state(ACP_STATE_TRIGGERED);'
          else:
            lambda: 'id(acp1).publish_state(ACP_STATE_DISARMED);'

  # Monitor the alarm armed/disarmed state of the physical panel
  # and update the virtual alarm panel accordingly
  - id: !extend zone12
    internal: true
    pin:
      number: $zone12
      mode: INPUT_PULLUP

    on_state:
      - if:
          condition:
            binary_sensor.is_on: zone12
          then:
            lambda: 'id(acp1).publish_state(ACP_STATE_DISARMED);'
          else:
            lambda: 'id(acp1).publish_state(ACP_STATE_ARMED_AWAY);'

output:
  - id: alarm_keyswitch_output
    platform: gpio
    pin: $out1

button:
  - platform: output
    id: alarm_keyswitch
    name: Arm/Disarm keyswitch
    output: alarm_keyswitch_output
    duration: $keyswitch_momentary_time

light:
  - id: esp32s3_rgb_led
    name: RGB LED
    platform: esp32_rmt_led_strip
    rgb_order: GRB
    pin: GPIO38
    num_leds: 1
    chipset: SK6812
    default_transition_length: 300ms
    effects:
      - pulse:
          update_interval: 2s
          min_brightness: 20%
          max_brightness: 50%

script:
  id: blink_status_led
  then:
    - light.turn_on:
          id: esp32s3_rgb_led
          red: 0%
          blue: 60%
          green: 0%
          brightness: 50%
          flash_length: 100ms

api: 
web_server:
logger:
  level: VERBOSE
  logs:
    json: DEBUG